parameters:
  - name: awsRegion
    type: string
  - name: awsServiceConnection
    type: string
  - name: projectName
    type: string
  - name: terraformOutputDir
    type: string
  - name: terraformSourceStackDir
    type: string
  - name: terragruntExe
    type: string

steps:
  # Create directory for Terraform plan, with package.json of parent project
  - task: CopyFiles@2
    displayName: Copy package.json
    inputs:
      sourceFolder: ${{ parameters.projectName }}
      contents: package.json
      targetFolder: ${{ parameters.terraformOutputDir }}

  # Validate configuration for stack
  - template: run-terragrunt-cmd-aws.yml
    parameters:
      awsRegion: ${{ parameters.awsRegion }}
      awsServiceConnection: ${{ parameters.awsServiceConnection }}
      tgCommand: validate
      tgExe: ${{ parameters.terragruntExe }}
      workingDirectory: ${{ parameters.terraformSourceStackDir }}

  # Generate Terraform plan file for stack
  - template: run-terragrunt-cmd-aws.yml
    parameters:
      awsRegion: ${{ parameters.awsRegion }}
      awsServiceConnection: ${{ parameters.awsServiceConnection }}
      tgCommand: plan
      tgOptions: "-out ${{ parameters.terraformOutputDir }}/tfplan.out"
      tgExe: ${{ parameters.terragruntExe }}
      workingDirectory: ${{ parameters.terraformSourceStackDir }}

  # Export a JSON version of Terraform plan file
  - template: run-terragrunt-cmd-aws.yml
    parameters:
      awsRegion: ${{ parameters.awsRegion }}
      awsServiceConnection: ${{ parameters.awsServiceConnection }}
      tgCommand: show
      tgOptions: "-json ${{ parameters.terraformOutputDir }}/tfplan.out > ${{ parameters.terraformOutputDir }}/tfplan.json"
      tgExe: ${{ parameters.terragruntExe }}
      workingDirectory: ${{ parameters.terraformSourceStackDir }}
